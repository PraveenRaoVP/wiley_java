package StringClasses;

import java.util.Arrays;
import java.util.List;

// standard output stream (System.out) and 
// standard error output stream (System.err) are of type PrintStream, 
// so that means you will learn how to use the System.out.format() method 
// and System.err.format() method, and also String.format() method.

//Syntax: format(String format, Object... args)

//A format String consists of static text embedded with format specifiers which must adhere to the following syntax:
//%[argument_index$][flags][width][.precision]conversion

//***The elements inside the brackets are optional. Let’s understand each element in briefs:
//The % sign indicates the beginning of a format specifier.
//The optional argument_index is a decimal integer indicating the position of the argument in the argument list. The first argument is referenced by "1$", the second by "2$", etc.
//The optional flags is a set of characters that modify the output format. The set of valid flags depends on the conversion.
//The optional width is a positive decimal integer indicating the minimum number of characters to be written to the output.
//The optional precision is a non-negative decimal integer usually used to restrict the number of characters. The specific behavior depends on the conversion.
//The required conversion is a character indicating how the argument should be formatted. The set of valid conversions for a given argument depends on the argument's data type.


//Few conversions that are widely used:
//d formats an integer value as a decimal value.
//f formats a floating point value as a decimal value.
//n outputs a platform-specific line terminator.
//s formats any value as a string.
//x formats an integer as a hexadecimal value.
//t or T are prefix date time conversions.
//tTformats a Date object as 24-hour clock time (hour:minute:second).
//tF formats a Date object as year-month-day.
//tD formats a Date object as month/day/year.


//Few flags:
//'-': The result will be left-justified
//‘+’: The result will always include a sign
//'0': The result will be zero-padded
//'  ':  The result will include a leading space for positive values
//'(': The result will enclose negative numbers in parentheses


public class StringFormat {
	public static void main(String[] args) {
		
		String title = "Java Developer";
		float salary = 2000.3999f;
		//System.out.format("%s has %.3f USD salary%n", title, salary);
		
		// Left justification
		List<String> techStack = Arrays.asList(
				"Essential Java",
				"Head First Java",
				"Java Design Patterns"
				);
		
		for(String book: techStack) {
			System.out.format("%-40s - In Stock%n", book);
		}
	}
}
